#!/usr/bin/env bash
# shellcheck disable=SC2120
fzf_launch() {
  fzf \
    --ansi \
    --delimiter " {2,}" \
    --prompt "Type enter | name or email | a date & then ^O | or use ^C > "\
    --header "keys: ^O: filter since given date; enter: show diffs; ^F,^B: preview ↑↓; ^C: exit/back"$'\n'"$( \
        [ -n "$1" ] \
        && echo -e "\e[1;36mTo filter to changes after a different date, enter another date above and then ^O.\e[0m"$'\n'"\e[1;33mShowing log for changes since \e[1;97m$1\e[1;33m, filtered to matches for the query (if any) above.\e[0m" \
        || echo -e "\e[1;36mTo filter to changes after a specific date, type a date above and then ^O.\e[0m"$'\n'"\e[1;33mShowing log for entire history, filtered to matches for the query (if any) above.\e[0m" \
        )"$'\n'" " \
    --color "fg:15,bg:-1,hl:1" \
    --color "header:green:italic" \
    --color "prompt:80,info:40" \
    --color "border:dim" \
    --info=inline \
    --border horizontal \
    --border=rounded \
    --layout=reverse \
    --pointer ▶ \
    --no-scrollbar \
    --preview-window=border-line,~5 \
    --preview "printf '\n\n\n\n\n'; git log --no-patch --color --author={5}" \
    --bind "ctrl-b:preview-page-up,ctrl-f:preview-page-down" \
    --bind "enter:execute(clear; git log --patch-with-stat --color --author={5}; printf '\nPress any key to go back...'; read -n 1 -r)" \
    --bind "ctrl-o:execute(shortlog {q} | nl | fzf_launch {q})" \
    --bind "ctrl-q:accept" \
    --multi \
    --print-query
}
export -f fzf_launch
format_output() {
awk '
{
    # Store the raw data in arrays for a second pass
    counts[NR] = $1

    # Extract email address
    for (i = NF; i > 0; i--) {
        if ($i ~ /^<.*>$/) {
            emails[NR] = $i
            break
        }
    }

    # Extract name (everything between count and email)
    name = ""
    for (i = 2; i < NF; i++) {  # Start from 2nd field (skip count)
        if ($i == emails[NR]) break   # Stop at email
        name = name $i " "
    }
    names[NR] = substr(name, 1, length(name) - 1)  # Trim trailing space

    # Track max widths for alignment
    if (length(counts[NR]) > max_count) max_count = length(counts[NR])
    if (length(names[NR]) > max_name) max_name = length(names[NR])
}

END {
    # ANSI color codes
    count_color="\033[1;32m"
    name_color="\033[1;37m"
    email_color="\033[0;36m"
    reset="\033[0m"

    # Print formatted output with proper column alignment
    for (i = 1; i <= NR; i++) {
        printf "  %s%" max_count "d%s  %s%-" max_name "s%s  %s%s%s\n",
            count_color, counts[i], reset,
            name_color, names[i], reset,
            email_color, emails[i], reset
    }
}'
}
export -f format_output
shortlog() {
    if [[ -n $1 ]]; then
      git shortlog -n -s -e --since="$1" | format_output
    else
      git shortlog -n -s -e | format_output
    fi
}
export -f shortlog
shortlog | nl | fzf_launch
